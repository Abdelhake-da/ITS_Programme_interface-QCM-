from django.db import models
from shortuuid.django_fields import ShortUUIDField


# Create your models here.
def user_directory_path(instance, filename):
    # Get the ID generated by the ShortUUIDField
    less_id = instance.less_id

    # Generate the file path
    file_path = f"lessons/{less_id}/{filename}"
    return file_path


class Subject(models.Model):
    sub_id = ShortUUIDField(
        unique=True, length=10, max_length=20, prefix="sub-"
    )
    name = models.CharField(max_length=100)
    def __str__(self):
        return self.name

class Lesson(models.Model):
    less_id = ShortUUIDField(unique=True, length=10, max_length=20, prefix="less-" )
    name = models.CharField(unique=True, max_length=100)
    description = models.TextField()
    video_url = models.URLField(null = True, blank = True)
    pdf_file = models.FileField(
        null=True, blank=True, upload_to=user_directory_path
    )
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE, related_name='lessons')
    def __str__(self):
        return self.name

class QuestionExam(models.Model):
    ques_exa_id = ShortUUIDField(unique=True, length=10, max_length=20, prefix="ques-")
    question = models.TextField()
    answer = models.CharField(max_length=100)
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE, related_name='question_exams')
    def __str__(self):
        return f"{self.question} {self.answer}"

class Student(models.Model):
    student_id = ShortUUIDField(
        unique=True, length=10, max_length=20, prefix="stud-"
    )
    name = models.CharField(max_length=100 , unique = True)
    questions = models.ManyToManyField(
        QuestionExam, through="QuestionReward", related_name="students"
    )
    def __str__(self):
        return self.name

class QuestionReward(models.Model):
    question = models.ForeignKey(QuestionExam, on_delete=models.CASCADE)
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    reward = models.FloatField()

    def __str__(self):
        return f"{self.question} - Student: {self.student}, Reward: {self.reward}"
